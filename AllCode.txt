=========================================================================
=========================================================================
=========================================================================
		PYTHON
=========================================================================
     Python Virtual environment
=========================================================================
Create a Virtual Environment in Linux

	python3 -m venv <name of env>

Activate the virtual environment

	source venv/bin/activate
=========================================================================

=========================================================================
	requirements.txt
=========================================================================

To create the file:
	
	pip freeze > requirements.txt

To view the file:
	
	cat requirements.txt

To run the installations: 
	
	pip install -r requirements.txt

=========================================================================
=========================================================================
	Disable Warnings
=========================================================================

import warnings
warnings.filterwarnings("ignore")

=========================================================================
	Dataframes
=========================================================================
unique value of a column : 

	df.name_column.nuique()



drop column in dataframe : 
	df.drop(labels=[<column_names>], axis=1)

Sort series: 
	pd.Series(df[<name_column>].unique()).sort_values()

Convert type of columns in data frame : 
	df[<name_column>].astype(<type>)


=========================================================================
Replace occurence in datframe column by another value:

def generalize(ser, match_name, default=None, regex=False, case=False):
    """ Search a series for text matches.
    Based on code from https://www.metasnake.com/blog/pydata-assign.html

    ser: pandas series to search
    match_name: tuple containing text to search for and text to use for normalization
    default: If no match, use this to provide a default value, otherwise use the original text
    regex: Boolean to indicate if match_name contains a  regular expression
    case: Case sensitive search

    Returns a pandas series with the matched value

    """
    seen = None
    for match, name in match_name:
        mask = ser.str.contains(match, case=case, regex=regex , na=False)
        if seen is None:
            seen = mask
        else:
            seen |= mask
        ser = ser.where(~mask, name)
    if default:
        ser = ser.where(seen, default)
    else:
        ser = ser.where(seen, ser.values)
    return ser

=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================
=========================================================================


=========================================================================
	     Git 
=========================================================================

Set username : 
	
	git config --global user.name "PicoRadia"

Set Email: 

	git config --global user.email "r.elhamdouni@enim.ac.ma"

Show  the configs : 

	git config -l

ssh github:

	ssh -T git@github.com

ssh clone github : 

	git clone git@github.com:PicoRadia/<name_of_repo>.git

ssh push github:

	git push


